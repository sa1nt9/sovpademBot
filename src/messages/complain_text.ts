import { answerFormKeyboard, answerLikesFormKeyboard, complainKeyboard } from '../constants/keyboards';
import { prisma } from '../db/postgres';
import { getCandidate } from '../functions/db/getCandidate';
import { getOneLike } from '../functions/db/getOneLike';
import { saveLike } from '../functions/db/saveLike';
import { sendForm } from '../functions/sendForm';
import { MyContext } from '../typescript/context';

export async function complainTextStep(ctx: MyContext) {
    const message = ctx.message!.text;

    if (message === ctx.t('back')) {
        // –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ –∂–∞–ª–æ–±—ã
        ctx.session.step = 'complain';
        ctx.session.additionalFormInfo.reportType = undefined;

        await ctx.reply(ctx.t('complain_text'), {
            reply_markup: complainKeyboard()
        });

        return;
    }

    try {
        if (ctx.session.additionalFormInfo.reportType && ctx.session.currentCandidate) {
            // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –∂–∞–ª–æ–±–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            await prisma.report.create({
                data: {
                    reporterId: String(ctx.from?.id),
                    targetId: ctx.session.currentCandidate?.id,
                    type: ctx.session.additionalFormInfo.reportType as any,
                    text: message || undefined
                }
            });
            await saveLike(ctx, ctx.session.currentCandidate.id, false);

            // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∂–∞–ª–æ–±–µ –≤ —Å–µ—Å—Å–∏–∏
            ctx.session.additionalFormInfo.reportType = undefined;

            // –ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∂–∞–ª–æ–±—ã
            await ctx.reply(ctx.t('complain_will_be_examined'));

        }
        if (ctx.session.additionalFormInfo.searchingLikes) {
            ctx.session.step = 'search_people_with_likes'

            const oneLike = await getOneLike(String(ctx.from!.id));


            await ctx.reply("‚ú®üîç", {
                reply_markup: answerLikesFormKeyboard()
            });

            if (oneLike?.user) {
                ctx.session.currentCandidate = oneLike?.user
                await sendForm(ctx, oneLike.user, { myForm: false, like: oneLike });
            }
        } else {
            ctx.session.step = 'search_people';

            await ctx.reply("‚ú®üîç", {
                reply_markup: answerFormKeyboard()
            });

            const candidate = await getCandidate(ctx);
            await sendForm(ctx, candidate || null, { myForm: false });
        }
    } catch (error) {
        ctx.logger.error(error, 'Error saving report');

        // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –∞–Ω–∫–µ—Ç
        ctx.session.step = 'search_people';

        await ctx.reply("‚ú®üîç", {
            reply_markup: answerFormKeyboard()
        });

        const candidate = await getCandidate(ctx);
        await sendForm(ctx, candidate || null, { myForm: false });
    }
} 