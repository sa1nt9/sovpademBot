generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id             String       @id // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
    name           String
    city           String
    longitude      Float
    latitude       Float
    gender         Gender
    interestedIn   InterestedIn
    age            Int
    text           String
    files          Json // –ú–∞—Å—Å–∏–≤ —Ñ–∞–π–ª–æ–≤ –≤ JSON
    ownCoordinates Boolean      @default(false) // –ú–æ–∂–µ—Ç –±—ã—Ç—å null
    createdAt      DateTime     @default(now()) // –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è
    isActive       Boolean      @default(true) // –ê–∫—Ç–∏–≤–Ω–∞ –ª–∏ –∞–Ω–∫–µ—Ç–∞
    referrerId     String? // ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–≥–ª–∞—Å–∏–ª

    likesGiven    UserLike[] @relation("UserLikes")
    likesReceived UserLike[] @relation("UserLiked")

    reports     Report[] @relation("UserReports")
    reportedBy  Report[] @relation("UserReported")

    rouletteUser RouletteUser?

    // –°–≤—è–∑–∏ –¥–ª—è —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
    blacklist     Blacklist[] @relation("UserBlacklist")
    blacklistedBy Blacklist[] @relation("BlacklistedBy")
}

model UserLike {
    id          String   @id @default(uuid())
    userId      String // –ö—Ç–æ –ª–∞–π–∫–Ω—É–ª
    targetId    String // –ö–æ–≥–æ –ª–∞–π–∫–Ω—É–ª–∏
    liked       Boolean // true ‚Äî –ª–∞–π–∫, false ‚Äî –¥–∏–∑–ª–∞–π–∫
    message     String? // –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫ –ª–∞–π–∫—É
    privateNote String? // –õ–∏—á–Ω–∞—è –∑–∞–º–µ—Ç–∫–∞ –∫ –ª–∞–π–∫—É (–≤–∏–¥–Ω–∞ —Ç–æ–ª—å–∫–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é)
    videoFileId String? // ID —Ñ–∞–π–ª–∞ –≤–∏–¥–µ–æ, –µ—Å–ª–∏ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
    voiceFileId    String?
    videoNoteFileId String?
    isMutual    Boolean  @default(false)
    isMutualAt   DateTime?
    createdAt   DateTime @default(now())

    user   User @relation("UserLikes", fields: [userId], references: [id], onDelete: Cascade)
    target User @relation("UserLiked", fields: [targetId], references: [id], onDelete: Cascade)
}

model Session {
    id    Int    @id @default(autoincrement())
    key   String @unique
    value String
}

model Report {
    id         String     @id @default(uuid())
    reporterId String // ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–¥–∞–ª –∂–∞–ª–æ–±—É
    targetId   String // ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–≥–æ –ø–æ–¥–∞–Ω–∞ –∂–∞–ª–æ–±–∞
    type       ReportType // –¢–∏–ø –∂–∞–ª–æ–±—ã
    text       String? // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –∂–∞–ª–æ–±—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π)
    createdAt  DateTime   @default(now())

    reporter User @relation(name: "UserReports", fields: [reporterId], references: [id], onDelete: Cascade)
    target   User @relation(name: "UserReported", fields: [targetId], references: [id], onDelete: Cascade)
}

enum ReportType {
    other
    sale
    adult_content
    advertising
    scam
    dislike
}

enum Gender {
    male
    female
}

enum InterestedIn {
    male
    female
    all
}

model RouletteUser {
    id              String   @id
    chatPartnerId   String?
    searchingPartner Boolean @default(true)
    createdAt       DateTime @default(now())
    profileRevealed  Boolean @default(false)
    usernameRevealed Boolean @default(false)

    user            User     @relation(fields: [id], references: [id], onDelete: Cascade)
    chatPartner     RouletteUser? @relation("ChatPartners", fields: [chatPartnerId], references: [id])
    partners        RouletteUser[] @relation("ChatPartners")
    
    // –°–≤—è–∑–∏ –¥–ª—è —Ä–µ–∞–∫—Ü–∏–π
    reactionsGiven    RouletteReaction[] @relation("ReactionGiver")
    reactionsReceived RouletteReaction[] @relation("ReactionReceiver")

    // –°–≤—è–∑–∏ –¥–ª—è —á–∞—Ç–æ–≤
    chatsAsUser1    RouletteChat[] @relation("UserChats1")
    chatsAsUser2    RouletteChat[] @relation("UserChats2")
}

model RouletteReaction {
    id          String         @id @default(uuid())
    fromUserId  String         // ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –ø–æ—Å—Ç–∞–≤–∏–ª —Ä–µ–∞–∫—Ü–∏—é
    toUserId    String         // ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –ø–æ—Å—Ç–∞–≤–∏–ª–∏ —Ä–µ–∞–∫—Ü–∏—é
    type        ReactionType   // –¢–∏–ø —Ä–µ–∞–∫—Ü–∏–∏
    createdAt   DateTime       @default(now())
    
    fromUser    RouletteUser   @relation("ReactionGiver", fields: [fromUserId], references: [id], onDelete: Cascade)
    toUser      RouletteUser   @relation("ReactionReceiver", fields: [toUserId], references: [id], onDelete: Cascade)
}

enum ReactionType {
    LIKE        // üëç
    DISLIKE     // üëé
    CLOWN       // ü§°
    FUNNY       // üòÇ
    BORING      // üò¥
    RUDE        // üò°
}

model RouletteChat {
    id                String      @id @default(uuid())
    user1Id          String      // ID –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user2Id          String      // ID –≤—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    startedAt        DateTime    @default(now())
    endedAt          DateTime?   // –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —á–∞—Ç–∞ (null –µ—Å–ª–∏ —á–∞—Ç –∞–∫—Ç–∏–≤–µ–Ω)
    isProfileRevealed Boolean    @default(false)  // –ë—ã–ª–∏ –ª–∏ —Ä–∞—Å–∫—Ä—ã—Ç—ã –∞–Ω–∫–µ—Ç—ã
    isUsernameRevealed Boolean   @default(false)  // –ë—ã–ª–∏ –ª–∏ —Ä–∞—Å–∫—Ä—ã—Ç—ã Telegram-–ø—Ä–æ—Ñ–∏–ª–∏
    
    user1            RouletteUser @relation("UserChats1", fields: [user1Id], references: [id], onDelete: Cascade)
    user2            RouletteUser @relation("UserChats2", fields: [user2Id], references: [id], onDelete: Cascade)
}

model Blacklist {
    id        String   @id @default(uuid())
    userId    String   // –ö—Ç–æ –¥–æ–±–∞–≤–∏–ª –≤ –ß–°
    targetId  String   // –ö–æ–≥–æ –¥–æ–±–∞–≤–∏–ª–∏ –≤ –ß–°
    createdAt DateTime @default(now())

    user   User @relation("UserBlacklist", fields: [userId], references: [id], onDelete: Cascade)
    target User @relation("BlacklistedBy", fields: [targetId], references: [id], onDelete: Cascade)
}

