import { blacklistKeyboard, profileKeyboard } from "../constants/keyboards";
import { prisma } from "../db/postgres";
import { sendForm } from "../functions/sendForm";
import { MyContext } from "../typescript/context";

export const blacklistCommand = async (ctx: MyContext) => {
    const userId = String(ctx.message?.from.id);

    try {
        // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é –∑–∞–ø–∏—Å—å –∏ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        const [blacklistedUser, totalCount] = await Promise.all([
            prisma.blacklist.findFirst({
                where: { userId },
                include: {
                    target: true
                },
                orderBy: {
                    createdAt: 'desc'
                }
            }),
            prisma.blacklist.count({
                where: { userId }
            })
        ]);

        if (!blacklistedUser) {
            // –ï—Å–ª–∏ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç
            await ctx.reply(ctx.t('blacklist_empty'));

            await ctx.reply(ctx.t('sleep_menu'), {
                reply_markup: profileKeyboard()
            });

            return;
        }

        ctx.session.step = "blacklist_user";

        await ctx.reply("üö´üìã", {
            reply_markup: blacklistKeyboard(ctx.t)
        });

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–ø–∏—Å—å –∏–∑ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
        await sendForm(ctx, blacklistedUser.target, { 
            myForm: false, 
            isBlacklist: true, 
            blacklistCount: totalCount - 1
        });


        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –≤ —Å–µ—Å—Å–∏—é
        ctx.session.currentBlacklistedUser = blacklistedUser.target;

    } catch (error) {
        ctx.logger.error(error, 'Error in blacklist command');
        await ctx.reply(ctx.t('error_occurred'));
    }
};