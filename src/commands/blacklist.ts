import { blacklistKeyboard, profileKeyboard } from "../constants/keyboards";
import { prisma } from "../db/postgres";
import { sendForm } from "../functions/sendForm";
import { MyContext } from "../typescript/context";
import { ProfileType } from "@prisma/client";
import { IProfile } from "../typescript/interfaces/IProfile";
import { getProfileModelName } from "../functions/db/profilesService";

export const blacklistCommand = async (ctx: MyContext) => {
    const userId = String(ctx.message?.from.id);

    try {
        // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é –∑–∞–ø–∏—Å—å –∏ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        const [blacklistedProfile, totalCount] = await Promise.all([
            prisma.blacklist.findFirst({
                where: { userId },
                orderBy: {
                    createdAt: 'desc'
                }
            }),
            prisma.blacklist.count({
                where: { userId }
            })
        ]);

        if (!blacklistedProfile) {
            // –ï—Å–ª–∏ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç
            await ctx.reply(ctx.t('blacklist_empty'));

            await ctx.reply(ctx.t('sleep_menu'), {
                reply_markup: profileKeyboard()
            });

            return;
        }

        ctx.session.step = "blacklist_user";

        await ctx.reply("üö´üìã", {
            reply_markup: blacklistKeyboard(ctx.t)
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ç–∏–ø—ã –ø—Ä–æ—Ñ–∏–ª–µ–π
        const profile: IProfile = await (prisma as any)[getProfileModelName(blacklistedProfile.profileType)].findUnique({
            where: { id: blacklistedProfile.targetProfileId }
        });
        
        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
        const user = await prisma.user.findUnique({
            where: { id: profile.userId }
        });
        
        if (!user) {
            await ctx.reply(ctx.t('profile_not_found'));
            return;
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–ø–∏—Å—å –∏–∑ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
        await sendForm(ctx, user, { 
            myForm: false, 
            isBlacklist: true, 
            blacklistCount: totalCount - 1,
            profileType: blacklistedProfile.profileType,
            subType: (blacklistedProfile as any).subType || ""
        });

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å –∏–∑ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –≤ —Å–µ—Å—Å–∏—é
        ctx.session.currentBlacklistedProfile = profile;

    } catch (error) {
        ctx.logger.error(error, 'Error in blacklist command');
        await ctx.reply(ctx.t('error_occurred'));
    }
};