"use strict";var __awaiter=this&&this.__awaiter||function(e,r,i,o){return new(i||(i=Promise))((function(s,t){function n(e){try{a(o.next(e))}catch(e){t(e)}}function l(e){try{a(o.throw(e))}catch(e){t(e)}}function a(e){var r;e.done?s(e.value):(r=e.value,r instanceof i?r:new i((function(e){e(r)}))).then(n,l)}a((o=o.apply(e,r||[])).next())}))};Object.defineProperty(exports,"__esModule",{value:!0}),exports.restoreProfileValues=void 0;const client_1=require("@prisma/client"),postgres_1=require("../db/postgres"),restoreProfileValues=e=>__awaiter(void 0,void 0,void 0,(function*(){var r,i;try{const i=String(null===(r=e.from)||void 0===r?void 0:r.id);if(!i)return void e.logger.warn("No user ID found for profile restoration");e.logger.info({userId:i},"Starting profile values restoration");const o=e.session.activeProfile;if(!o)return void e.logger.warn({userId:i},"No active profile found for restoration");const s=`${o.profileType.toLowerCase()}Profile`;if(!s)return void e.logger.warn({userId:i,profileType:o.profileType},"Invalid profile model name");e.logger.info({userId:i,profileType:o.profileType,profileModelName:s},"Restoring profile values");let t=null;switch(s){case"relationshipProfile":t=yield postgres_1.prisma.relationshipProfile.findFirst({where:{userId:i}});break;case"sportProfile":t=yield postgres_1.prisma.sportProfile.findFirst({where:Object.assign({userId:i},o.profileType!==client_1.ProfileType.RELATIONSHIP&&"subType"in o?{subType:o.subType}:{})});break;case"gameProfile":t=yield postgres_1.prisma.gameProfile.findFirst({where:Object.assign({userId:i},o.profileType!==client_1.ProfileType.RELATIONSHIP&&"subType"in o?{subType:o.subType}:{})});break;case"hobbyProfile":t=yield postgres_1.prisma.hobbyProfile.findFirst({where:Object.assign({userId:i},o.profileType!==client_1.ProfileType.RELATIONSHIP&&"subType"in o?{subType:o.subType}:{})});break;case"itProfile":t=yield postgres_1.prisma.itProfile.findFirst({where:Object.assign({userId:i},o.profileType!==client_1.ProfileType.RELATIONSHIP&&"subType"in o?{subType:o.subType}:{})})}if(t){e.logger.info({userId:i,profileType:o.profileType,hasProfile:!0},"Found profile in database");const r=yield postgres_1.prisma.user.findUnique({where:{id:i}});if(!r)return void e.logger.warn({userId:i},"User not found in database");e.session.activeProfile=Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({},e.session.activeProfile),{name:r.name||"",age:r.age||0,gender:r.gender||"",city:r.city||"",location:{longitude:r.longitude||0,latitude:r.latitude||0},ownCoordinates:r.ownCoordinates||!1,description:t.description||"",interestedIn:t.interestedIn||"",files:JSON.parse(t.files)||[]}),o.profileType===client_1.ProfileType.SPORT?{level:t.level||""}:{}),o.profileType===client_1.ProfileType.GAME?{accountLink:t.accountLink||""}:{}),o.profileType===client_1.ProfileType.IT?{experience:t.experience||""}:{}),o.profileType===client_1.ProfileType.IT?{technologies:t.technologies||""}:{}),o.profileType===client_1.ProfileType.IT?{github:t.github||""}:{}),e.logger.info({userId:i,profileType:o.profileType},"Successfully restored profile values")}else e.logger.warn({userId:i,profileType:o.profileType},"Profile not found in database")}catch(r){e.logger.error({userId:null===(i=e.from)||void 0===i?void 0:i.id,error:r instanceof Error?r.message:"Unknown error",stack:r instanceof Error?r.stack:void 0},"Error restoring profile values")}}));exports.restoreProfileValues=restoreProfileValues;