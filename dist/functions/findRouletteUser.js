"use strict";var __awaiter=this&&this.__awaiter||function(e,r,t,n){return new(t||(t=Promise))((function(o,s){function a(e){try{d(n.next(e))}catch(e){s(e)}}function i(e){try{d(n.throw(e))}catch(e){s(e)}}function d(e){var r;e.done?o(e.value):(r=e.value,r instanceof t?r:new t((function(e){e(r)}))).then(a,i)}d((n=n.apply(e,r||[])).next())}))};Object.defineProperty(exports,"__esModule",{value:!0}),exports.findRouletteUser=void 0;const keyboards_1=require("../constants/keyboards"),postgres_1=require("../db/postgres"),getUserReactions_1=require("./getUserReactions"),getRoulettePartner_1=require("./db/getRoulettePartner"),sendForm_1=require("./sendForm"),i18n_1=require("../i18n"),findRouletteUser=e=>__awaiter(void 0,void 0,void 0,(function*(){var r;const t=String(null===(r=e.message)||void 0===r?void 0:r.from.id);e.logger.info({userId:t},"Starting roulette user search"),yield postgres_1.prisma.rouletteUser.upsert({where:{id:t},create:{id:t,searchingPartner:!0},update:{searchingPartner:!0,chatPartnerId:null}}),e.logger.info({userId:t},"User marked as searching partner");const n=yield(0,getRoulettePartner_1.getRoulettePartner)(e);if(n){e.logger.info({userId:t,partnerId:n},"Found roulette partner"),yield postgres_1.prisma.rouletteChat.create({data:{user1Id:t,user2Id:n,startedAt:new Date,isProfileRevealed:!1,isUsernameRevealed:!1}}),e.logger.info({userId:t,partnerId:n},"Created roulette chat"),yield postgres_1.prisma.rouletteUser.update({where:{id:t},data:{chatPartnerId:n,searchingPartner:!1,usernameRevealed:!1,profileRevealed:!1}}),yield postgres_1.prisma.rouletteUser.update({where:{id:n},data:{chatPartnerId:t,searchingPartner:!1,usernameRevealed:!1,profileRevealed:!1}}),e.logger.info({userId:t,partnerId:n},"Updated both users roulette status");const r=yield postgres_1.prisma.user.findUnique({where:{id:t}}),o=yield postgres_1.prisma.user.findUnique({where:{id:n}}),s=yield(0,getUserReactions_1.getUserReactions)(e,n,{showTitle:!0});let a;if(r&&o){const r=(0,sendForm_1.buildInfoText)(e,o,{myForm:!1});a=s?`${e.t("roulette_found")}\n\n${r}\n\n${s}`:`${e.t("roulette_found")}\n\n${r}`}else a=s?`${e.t("roulette_found")}\n\n${s}`:e.t("roulette_found");yield e.reply(a,{reply_markup:(0,keyboards_1.rouletteKeyboard)(e.t)});const i=yield(0,getUserReactions_1.getUserReactions)(e,t,{showTitle:!0});let d;const u=yield postgres_1.prisma.session.findUnique({where:{key:t}}),{__language_code:l}=u?JSON.parse(u.value):{},g=(0,i18n_1.i18n)(!1);if(r&&o){const t=(0,sendForm_1.buildInfoText)(e,r,{myForm:!1});d=i?`${g.t(l||"ru","roulette_found")}\n\n${t}\n\n${i}`:`${g.t(l||"ru","roulette_found")}\n\n${t}`}else d=i?`${g.t(l||"ru","roulette_found")}\n\n${i}`:`${g.t(l||"ru","roulette_found")}`;yield e.api.sendMessage(n,d,{reply_markup:(0,keyboards_1.rouletteKeyboard)(e.t)}),e.logger.info({userId:t,partnerId:n},"Sent roulette messages to both users")}else e.logger.info({userId:t},"No partner found, continuing search"),yield e.reply(e.t("roulette_searching"),{reply_markup:(0,keyboards_1.rouletteStopKeyboard)(e.t)})}));exports.findRouletteUser=findRouletteUser;