"use strict";var __awaiter=this&&this.__awaiter||function(e,r,t,i){return new(t||(t=Promise))((function(o,l){function n(e){try{a(i.next(e))}catch(e){l(e)}}function s(e){try{a(i.throw(e))}catch(e){l(e)}}function a(e){var r;e.done?o(e.value):(r=e.value,r instanceof t?r:new t((function(e){e(r)}))).then(n,s)}a((i=i.apply(e,r||[])).next())}))};Object.defineProperty(exports,"__esModule",{value:!0}),exports.getNextBlacklistProfile=void 0;const client_1=require("@prisma/client"),postgres_1=require("../../db/postgres"),profilesService_1=require("./profilesService"),logger_1=require("../../logger"),getNextBlacklistProfile=(e,r)=>__awaiter(void 0,void 0,void 0,(function*(){var t;const i=String(null===(t=e.from)||void 0===t?void 0:t.id);logger_1.logger.info({userId:i,currentTargetProfileId:r},"Getting next blacklist profile");try{const e=yield postgres_1.prisma.blacklist.findFirst({where:{userId:i,targetProfileId:r},select:{createdAt:!0}});if(!e)return logger_1.logger.warn({userId:i,currentTargetProfileId:r},"Current blacklist record not found"),{profile:null,remainingCount:0};logger_1.logger.info({userId:i,currentTargetProfileId:r,currentRecordDate:e.createdAt},"Found current blacklist record");const[t,o]=yield Promise.all([postgres_1.prisma.blacklist.findFirst({where:{userId:i,targetProfileId:{not:r},createdAt:{lt:e.createdAt}},orderBy:{createdAt:"desc"}}),postgres_1.prisma.blacklist.count({where:{userId:i,createdAt:{lt:e.createdAt}}})]);logger_1.logger.info({userId:i,hasNextUser:!!t,remainingCount:o},"Retrieved next user and remaining count");let l=null;return(null==t?void 0:t.targetProfileId)&&(logger_1.logger.info({userId:i,targetProfileId:t.targetProfileId,profileType:t.profileType},"Fetching profile details for next blacklist user"),l=yield postgres_1.prisma[(0,profilesService_1.getProfileModelName)(t.profileType||client_1.ProfileType.RELATIONSHIP)].findUnique({where:{id:t.targetProfileId},include:{user:!0}}),l?logger_1.logger.info({userId:i,targetProfileId:t.targetProfileId},"Found profile details for next blacklist user"):logger_1.logger.warn({userId:i,targetProfileId:t.targetProfileId},"Profile not found for next blacklist user")),{profile:l||null,remainingCount:o}}catch(e){return logger_1.logger.error({userId:i,currentTargetProfileId:r,error:e instanceof Error?e.message:"Unknown error",stack:e instanceof Error?e.stack:void 0},"Error getting next blacklist profile"),{profile:null,remainingCount:0}}}));exports.getNextBlacklistProfile=getNextBlacklistProfile;