"use strict";var __awaiter=this&&this.__awaiter||function(e,r,o,i){return new(o||(o=Promise))((function(t,l){function g(e){try{n(i.next(e))}catch(e){l(e)}}function f(e){try{n(i.throw(e))}catch(e){l(e)}}function n(e){var r;e.done?t(e.value):(r=e.value,r instanceof o?r:new o((function(e){e(r)}))).then(g,f)}n((i=i.apply(e,r||[])).next())}))};Object.defineProperty(exports,"__esModule",{value:!0}),exports.saveProfileLike=saveProfileLike,exports.getMutualLikes=getMutualLikes,exports.getMutualLikesCount=getMutualLikesCount,exports.getProfileLike=getProfileLike,exports.getProfileLikes=getProfileLikes,exports.getProfileLikesCount=getProfileLikesCount,exports.hasMutualLike=hasMutualLike;const postgres_1=require("../../db/postgres"),logger_1=require("../../logger");function saveProfileLike(e,r,o,i,t,l,g,f,n){return __awaiter(this,void 0,void 0,(function*(){try{logger_1.logger.info({profileType:e,fromProfileId:r,toProfileId:o,liked:i},"Starting to save profile like");const s=yield postgres_1.prisma.profileLike.create({data:{profileType:e,fromProfileId:r,toProfileId:o,liked:i,message:t,privateNote:l,videoFileId:g,voiceFileId:f,videoNoteFileId:n}});logger_1.logger.info({likeId:s.id},"New like created successfully"),logger_1.logger.info({fromProfileId:o,toProfileId:r},"Checking for mutual like");const u=yield postgres_1.prisma.profileLike.findFirst({where:{fromProfileId:o,toProfileId:r,liked:!0}});return u&&i&&(logger_1.logger.info({mutualLikeId:u.id},"Mutual like found, updating both likes"),yield postgres_1.prisma.profileLike.update({where:{id:s.id},data:{isMutual:!0,isMutualAt:new Date}}),yield postgres_1.prisma.profileLike.update({where:{id:u.id},data:{isMutual:!0,isMutualAt:new Date}}),logger_1.logger.info("Mutual likes updated successfully")),s}catch(i){throw logger_1.logger.error({error:i,action:"Error saving profile like",profileType:e,fromProfileId:r,toProfileId:o}),i}}))}function getMutualLikes(e,r){return __awaiter(this,arguments,void 0,(function*(e,r,o=100,i=0){try{logger_1.logger.info({profileType:e,profileId:r,limit:o,offset:i},"Getting mutual likes");const t=yield postgres_1.prisma.profileLike.findMany({where:{profileType:e,liked:!0,isMutual:!0},orderBy:{isMutualAt:"desc"},skip:i,take:o});return logger_1.logger.info({count:t.length},"Mutual likes retrieved successfully"),t}catch(t){throw logger_1.logger.error({error:t,action:"Error getting mutual likes",profileType:e,profileId:r,limit:o,offset:i}),t}}))}function getMutualLikesCount(e){return __awaiter(this,void 0,void 0,(function*(){try{logger_1.logger.info({profileId:e},"Getting mutual likes count");const r=yield postgres_1.prisma.profileLike.count({where:{fromProfileId:e,liked:!0,isMutual:!0}});return logger_1.logger.info({profileId:e,count:r},"Mutual likes count retrieved"),r}catch(r){throw logger_1.logger.error({error:r,action:"Error getting mutual likes count",profileId:e}),r}}))}function getProfileLike(e,r){return __awaiter(this,void 0,void 0,(function*(){try{logger_1.logger.info({fromProfileId:e,toProfileId:r},"Getting profile like");const o=yield postgres_1.prisma.profileLike.findFirst({where:{fromProfileId:e,toProfileId:r}});return logger_1.logger.info({found:!!o},"Profile like search completed"),o}catch(o){throw logger_1.logger.error({error:o,action:"Error getting profile like",fromProfileId:e,toProfileId:r}),o}}))}function getProfileLikes(e){return __awaiter(this,arguments,void 0,(function*(e,r=10,o=0){try{logger_1.logger.info({profileId:e,limit:r,offset:o},"Getting profile likes");const i=yield postgres_1.prisma.profileLike.findMany({where:{toProfileId:e,liked:!0},orderBy:{createdAt:"desc"},skip:o,take:r});return logger_1.logger.info({profileId:e,count:i.length},"Profile likes retrieved successfully"),i}catch(i){throw logger_1.logger.error({error:i,action:"Error getting profile likes",profileId:e,limit:r,offset:o}),i}}))}function getProfileLikesCount(e,r){return __awaiter(this,void 0,void 0,(function*(){try{logger_1.logger.info({profileType:e,profileId:r},"Getting profile likes count");const o=yield postgres_1.prisma.profileLike.count({where:{toProfileId:r,liked:!0}});return logger_1.logger.info({profileId:r,count:o},"Profile likes count retrieved"),o}catch(o){throw logger_1.logger.error({error:o,action:"Error getting profile likes count",profileType:e,profileId:r}),o}}))}function hasMutualLike(e,r){return __awaiter(this,void 0,void 0,(function*(){try{logger_1.logger.info({profileId1:e,profileId2:r},"Checking for mutual like");const o=yield postgres_1.prisma.profileLike.findFirst({where:{fromProfileId:e,toProfileId:r,liked:!0}});logger_1.logger.info({found:!!o},"First like check completed");const i=yield postgres_1.prisma.profileLike.findFirst({where:{fromProfileId:r,toProfileId:e,liked:!0}});logger_1.logger.info({found:!!i},"Second like check completed");const t=null!==o&&null!==i;return logger_1.logger.info({hasMutual:t},"Mutual like check completed"),t}catch(o){throw logger_1.logger.error({error:o,action:"Error checking mutual like",profileId1:e,profileId2:r}),o}}))}