"use strict";var __awaiter=this&&this.__awaiter||function(e,r,i,t){return new(i||(i=Promise))((function(o,l){function n(e){try{f(t.next(e))}catch(e){l(e)}}function s(e){try{f(t.throw(e))}catch(e){l(e)}}function f(e){var r;e.done?o(e.value):(r=e.value,r instanceof i?r:new i((function(e){e(r)}))).then(n,s)}f((t=t.apply(e,r||[])).next())}))};Object.defineProperty(exports,"__esModule",{value:!0}),exports.getOneLike=getOneLike;const postgres_1=require("../../db/postgres"),logger_1=require("../../logger"),profilesService_1=require("./profilesService");function getOneLike(e,r){return __awaiter(this,void 0,void 0,(function*(){try{logger_1.logger.info({id:e,type:r},"Getting one like");const i=new Date(Date.now()-2592e6);if("user"===r){const r=yield postgres_1.prisma.$queryRaw`
                SELECT id, "profileType" FROM (
                    SELECT id, 'RELATIONSHIP'::text as "profileType" FROM "RelationshipProfile" WHERE "userId" = ${e}
                    UNION ALL
                    SELECT id, 'SPORT'::text as "profileType" FROM "SportProfile" WHERE "userId" = ${e}
                    UNION ALL
                    SELECT id, 'GAME'::text as "profileType" FROM "GameProfile" WHERE "userId" = ${e}
                    UNION ALL
                    SELECT id, 'HOBBY'::text as "profileType" FROM "HobbyProfile" WHERE "userId" = ${e}
                    UNION ALL
                    SELECT id, 'IT'::text as "profileType" FROM "ItProfile" WHERE "userId" = ${e}
                ) as profiles
            `,t=(yield postgres_1.prisma.profileLike.findMany({where:{fromProfileId:{in:r.map((e=>e.id))},createdAt:{gte:i}},select:{toProfileId:!0}})).map((e=>e.toProfileId)),o=yield postgres_1.prisma.profileLike.findFirst({where:{toProfileId:{in:r.map((e=>e.id))},liked:!0,createdAt:{gte:i},fromProfileId:{notIn:t}}});if(!o)return null;const l=(0,profilesService_1.getProfileModelName)(o.profileType),n=yield postgres_1.prisma[l].findUnique({where:{id:o.fromProfileId},include:{user:!0}});return n&&n.isActive?Object.assign(Object.assign({},o),{fromProfile:n}):null}{const r=(yield postgres_1.prisma.profileLike.findMany({where:{fromProfileId:e,createdAt:{gte:i}},select:{toProfileId:!0}})).map((e=>e.toProfileId)),t=yield postgres_1.prisma.profileLike.findFirst({where:{toProfileId:e,liked:!0,createdAt:{gte:i},fromProfileId:{notIn:r}}});if(!t)return null;const o=(0,profilesService_1.getProfileModelName)(t.profileType),l=yield postgres_1.prisma[o].findUnique({where:{id:t.fromProfileId},include:{user:!0}});return l&&l.isActive?Object.assign(Object.assign({},t),{fromProfile:l}):null}}catch(i){return logger_1.logger.error({error:i,id:e,type:r},"Error in getOneLike"),null}}))}