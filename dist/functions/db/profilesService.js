"use strict";var __awaiter=this&&this.__awaiter||function(e,t,i,r){return new(i||(i=Promise))((function(p,s){function n(e){try{_(r.next(e))}catch(e){s(e)}}function o(e){try{_(r.throw(e))}catch(e){s(e)}}function _(e){var t;e.done?p(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(n,o)}_((r=r.apply(e,t||[])).next())}))};Object.defineProperty(exports,"__esModule",{value:!0}),exports.findKeyByValue=exports.getSubtypeLocalizations=exports.getProfileTypeLocalizations=void 0,exports.getUserProfiles=getUserProfiles,exports.getUserProfile=getUserProfile,exports.saveProfile=saveProfile,exports.toggleProfileActive=toggleProfileActive,exports.getProfileModelName=getProfileModelName;const postgres_1=require("../../db/postgres"),client_1=require("@prisma/client"),logger_1=require("../../logger");function getUserProfiles(e,t){return __awaiter(this,void 0,void 0,(function*(){logger_1.logger.info({userId:e},"Getting all user profiles");const i=yield postgres_1.prisma.relationshipProfile.findUnique({where:{userId:e}}),r=yield postgres_1.prisma.sportProfile.findMany({where:{userId:e}}),p=yield postgres_1.prisma.gameProfile.findMany({where:{userId:e}}),s=yield postgres_1.prisma.hobbyProfile.findMany({where:{userId:e}}),n=yield postgres_1.prisma.itProfile.findMany({where:{userId:e}}),o=[];return i&&o.push({profileType:client_1.ProfileType.RELATIONSHIP,name:t.t("profile_type_relationship"),isActive:i.isActive}),r.forEach((e=>{o.push({profileType:client_1.ProfileType.SPORT,subType:e.subType,name:`${t.t("profile_type_sport")}: ${t.t(getSportTypeName(e.subType))}`,isActive:e.isActive})})),p.forEach((e=>{o.push({profileType:client_1.ProfileType.GAME,subType:e.subType,name:`${t.t("profile_type_game")}: ${t.t(getGameTypeName(e.subType))}`,isActive:e.isActive})})),s.forEach((e=>{o.push({profileType:client_1.ProfileType.HOBBY,subType:e.subType,name:`${t.t("profile_type_hobby")}: ${t.t(getHobbyTypeName(e.subType))}`,isActive:e.isActive})})),n.forEach((e=>{o.push({profileType:client_1.ProfileType.IT,subType:e.subType,name:`${t.t("profile_type_it")}: ${t.t(getITTypeName(e.subType))}`,isActive:e.isActive})})),logger_1.logger.info({userId:e,profilesCount:o.length},"User profiles retrieved"),o}))}function getUserProfile(e,t,i){return __awaiter(this,void 0,void 0,(function*(){switch(logger_1.logger.info({userId:e,profileType:t,subType:i},"Getting specific user profile"),t){case client_1.ProfileType.RELATIONSHIP:{const t=yield postgres_1.prisma.relationshipProfile.findUnique({where:{userId:e}});return t?Object.assign(Object.assign({},t),{files:JSON.parse(t.files)||[]}):null}case client_1.ProfileType.SPORT:{if(!i)return null;const t=yield postgres_1.prisma.sportProfile.findUnique({where:{userId_subType:{userId:e,subType:i}}});return t?Object.assign(Object.assign({},t),{files:JSON.parse(t.files)}):null}case client_1.ProfileType.GAME:{if(!i)return null;const t=yield postgres_1.prisma.gameProfile.findUnique({where:{userId_subType:{userId:e,subType:i}}});return t?Object.assign(Object.assign({},t),{files:JSON.parse(t.files)}):null}case client_1.ProfileType.HOBBY:{if(!i)return null;const t=yield postgres_1.prisma.hobbyProfile.findUnique({where:{userId_subType:{userId:e,subType:i}}});return t?Object.assign(Object.assign({},t),{files:JSON.parse(t.files)}):null}case client_1.ProfileType.IT:{if(!i)return null;const t=yield postgres_1.prisma.itProfile.findUnique({where:{userId_subType:{userId:e,subType:i}}});return t?Object.assign(Object.assign({},t),{files:JSON.parse(t.files)}):null}default:return null}}))}function saveProfile(e){return __awaiter(this,void 0,void 0,(function*(){logger_1.logger.info({userId:e.userId,profileType:e.profileType},"Saving user profile");const t=JSON.stringify(e.files);try{switch(e.profileType){case"RELATIONSHIP":{const i=e,r=yield postgres_1.prisma.relationshipProfile.upsert({where:{userId:e.userId},update:{id:e.id,interestedIn:i.interestedIn,description:i.description,files:t,isActive:!0},create:{userId:e.userId,interestedIn:i.interestedIn,description:i.description,files:t,isActive:!0}});return Object.assign(Object.assign({},r),{files:e.files})}case"SPORT":{const i=e,r=yield postgres_1.prisma.sportProfile.upsert({where:{userId_subType:{userId:e.userId,subType:i.subType}},update:{id:e.id,level:i.level,description:e.description,interestedIn:i.interestedIn,files:t,isActive:!0},create:{userId:e.userId,subType:i.subType,interestedIn:i.interestedIn,level:i.level,description:e.description,files:t,isActive:!0}});return Object.assign(Object.assign({},r),{files:e.files})}case"GAME":{const i=e,r=yield postgres_1.prisma.gameProfile.upsert({where:{userId_subType:{userId:e.userId,subType:i.subType}},update:{id:e.id,accountLink:i.accountLink,description:e.description,interestedIn:i.interestedIn,files:t,isActive:!0},create:{userId:e.userId,subType:i.subType,accountLink:i.accountLink,interestedIn:i.interestedIn,description:e.description,files:t,isActive:!0}});return Object.assign(Object.assign({},r),{files:e.files})}case"HOBBY":{const i=e,r=yield postgres_1.prisma.hobbyProfile.upsert({where:{userId_subType:{userId:e.userId,subType:i.subType}},update:{id:e.id,description:e.description,interestedIn:i.interestedIn,files:t,isActive:!0},create:{userId:e.userId,subType:i.subType,interestedIn:i.interestedIn,description:e.description,files:t,isActive:!0}});return Object.assign(Object.assign({},r),{files:e.files})}case"IT":{const i=e,r=yield postgres_1.prisma.itProfile.upsert({where:{userId_subType:{userId:e.userId,subType:i.subType}},update:{id:e.id,interestedIn:i.interestedIn,experience:i.experience,technologies:i.technologies,github:i.github,description:e.description,files:t,isActive:!0},create:{userId:e.userId,subType:i.subType,experience:i.experience,technologies:i.technologies,github:i.github,description:e.description,interestedIn:i.interestedIn,files:t,isActive:!0}});return Object.assign(Object.assign({},r),{files:e.files})}default:throw new Error(`Неизвестный тип профиля: ${e.profileType}`)}}catch(t){throw logger_1.logger.error({error:t,userId:e.userId,profileType:e.profileType},"Error saving profile"),t}}))}function toggleProfileActive(e,t,i,r){return __awaiter(this,void 0,void 0,(function*(){logger_1.logger.info({userId:e,profileType:t,isActive:i,subType:r},"Toggling profile active status");try{switch(t){case client_1.ProfileType.RELATIONSHIP:yield postgres_1.prisma.relationshipProfile.update({where:{userId:e},data:{isActive:i}});break;case client_1.ProfileType.SPORT:if(!r)return!1;yield postgres_1.prisma.sportProfile.update({where:{userId_subType:{userId:e,subType:r}},data:{isActive:i}});break;case client_1.ProfileType.GAME:if(!r)return!1;yield postgres_1.prisma.gameProfile.update({where:{userId_subType:{userId:e,subType:r}},data:{isActive:i}});break;case client_1.ProfileType.HOBBY:if(!r)return!1;yield postgres_1.prisma.hobbyProfile.update({where:{userId_subType:{userId:e,subType:r}},data:{isActive:i}});break;case client_1.ProfileType.IT:if(!r)return!1;yield postgres_1.prisma.itProfile.update({where:{userId_subType:{userId:e,subType:r}},data:{isActive:i}});break;default:return!1}return!0}catch(i){return logger_1.logger.error({error:i,action:"Error updating profile status",userId:e,profileType:t,subType:r}),!1}}))}function getSportTypeName(e){return{[client_1.SportType.GYM]:"sport_type_gym",[client_1.SportType.RUNNING]:"sport_type_running",[client_1.SportType.SWIMMING]:"sport_type_swimming",[client_1.SportType.FOOTBALL]:"sport_type_football",[client_1.SportType.BASKETBALL]:"sport_type_basketball",[client_1.SportType.TENNIS]:"sport_type_tennis",[client_1.SportType.MARTIAL_ARTS]:"sport_type_martial_arts",[client_1.SportType.YOGA]:"sport_type_yoga",[client_1.SportType.CYCLING]:"sport_type_cycling",[client_1.SportType.CLIMBING]:"sport_type_climbing",[client_1.SportType.SKI_SNOWBOARD]:"sport_type_ski_snowboard"}[e]||"unknown"}function getGameTypeName(e){return{[client_1.GameType.CS_GO]:"game_type_cs_go",[client_1.GameType.DOTA2]:"game_type_dota2",[client_1.GameType.VALORANT]:"game_type_valorant",[client_1.GameType.RUST]:"game_type_rust",[client_1.GameType.MINECRAFT]:"game_type_minecraft",[client_1.GameType.LEAGUE_OF_LEGENDS]:"game_type_league_of_legends",[client_1.GameType.FORTNITE]:"game_type_fortnite",[client_1.GameType.PUBG]:"game_type_pubg",[client_1.GameType.GTA]:"game_type_gta",[client_1.GameType.APEX_LEGENDS]:"game_type_apex_legends",[client_1.GameType.FIFA]:"game_type_fifa",[client_1.GameType.CALL_OF_DUTY]:"game_type_call_of_duty",[client_1.GameType.WOW]:"game_type_wow",[client_1.GameType.GENSHIN_IMPACT]:"game_type_genshin_impact"}[e]||"unknown"}function getHobbyTypeName(e){return{[client_1.HobbyType.MUSIC]:"hobby_type_music",[client_1.HobbyType.DRAWING]:"hobby_type_drawing",[client_1.HobbyType.PHOTOGRAPHY]:"hobby_type_photography",[client_1.HobbyType.COOKING]:"hobby_type_cooking",[client_1.HobbyType.CRAFTS]:"hobby_type_crafts",[client_1.HobbyType.DANCING]:"hobby_type_dancing",[client_1.HobbyType.READING]:"hobby_type_reading"}[e]||"unknown"}function getITTypeName(e){return{[client_1.ITType.FRONTEND]:"it_type_frontend",[client_1.ITType.BACKEND]:"it_type_backend",[client_1.ITType.FULLSTACK]:"it_type_fullstack",[client_1.ITType.MOBILE]:"it_type_mobile",[client_1.ITType.DEVOPS]:"it_type_devops",[client_1.ITType.QA]:"it_type_qa",[client_1.ITType.DATA_SCIENCE]:"it_type_data_science",[client_1.ITType.GAME_DEV]:"it_type_game_dev",[client_1.ITType.CYBERSECURITY]:"it_type_cybersecurity",[client_1.ITType.UI_UX]:"it_type_ui_ux"}[e]||"unknown"}const getProfileTypeLocalizations=e=>({[e("profile_type_relationship")]:client_1.ProfileType.RELATIONSHIP,[e("profile_type_sport")]:client_1.ProfileType.SPORT,[e("profile_type_game")]:client_1.ProfileType.GAME,[e("profile_type_hobby")]:client_1.ProfileType.HOBBY,[e("profile_type_it")]:client_1.ProfileType.IT});exports.getProfileTypeLocalizations=getProfileTypeLocalizations;const getSubtypeLocalizations=e=>({sport:{[e("sport_type_gym")]:client_1.SportType.GYM,[e("sport_type_running")]:client_1.SportType.RUNNING,[e("sport_type_swimming")]:client_1.SportType.SWIMMING,[e("sport_type_football")]:client_1.SportType.FOOTBALL,[e("sport_type_basketball")]:client_1.SportType.BASKETBALL,[e("sport_type_tennis")]:client_1.SportType.TENNIS,[e("sport_type_martial_arts")]:client_1.SportType.MARTIAL_ARTS,[e("sport_type_yoga")]:client_1.SportType.YOGA,[e("sport_type_cycling")]:client_1.SportType.CYCLING,[e("sport_type_climbing")]:client_1.SportType.CLIMBING,[e("sport_type_ski_snowboard")]:client_1.SportType.SKI_SNOWBOARD},it:{[e("it_type_frontend")]:client_1.ITType.FRONTEND,[e("it_type_backend")]:client_1.ITType.BACKEND,[e("it_type_fullstack")]:client_1.ITType.FULLSTACK,[e("it_type_mobile")]:client_1.ITType.MOBILE,[e("it_type_devops")]:client_1.ITType.DEVOPS,[e("it_type_qa")]:client_1.ITType.QA,[e("it_type_data_science")]:client_1.ITType.DATA_SCIENCE,[e("it_type_game_dev")]:client_1.ITType.GAME_DEV,[e("it_type_cybersecurity")]:client_1.ITType.CYBERSECURITY,[e("it_type_ui_ux")]:client_1.ITType.UI_UX},game:{[e("game_type_cs_go")]:client_1.GameType.CS_GO,[e("game_type_dota2")]:client_1.GameType.DOTA2,[e("game_type_valorant")]:client_1.GameType.VALORANT,[e("game_type_rust")]:client_1.GameType.RUST,[e("game_type_minecraft")]:client_1.GameType.MINECRAFT,[e("game_type_league_of_legends")]:client_1.GameType.LEAGUE_OF_LEGENDS,[e("game_type_fortnite")]:client_1.GameType.FORTNITE,[e("game_type_pubg")]:client_1.GameType.PUBG,[e("game_type_gta")]:client_1.GameType.GTA,[e("game_type_apex_legends")]:client_1.GameType.APEX_LEGENDS,[e("game_type_fifa")]:client_1.GameType.FIFA,[e("game_type_call_of_duty")]:client_1.GameType.CALL_OF_DUTY,[e("game_type_wow")]:client_1.GameType.WOW,[e("game_type_genshin_impact")]:client_1.GameType.GENSHIN_IMPACT},hobby:{[e("hobby_type_music")]:client_1.HobbyType.MUSIC,[e("hobby_type_drawing")]:client_1.HobbyType.DRAWING,[e("hobby_type_photography")]:client_1.HobbyType.PHOTOGRAPHY,[e("hobby_type_cooking")]:client_1.HobbyType.COOKING,[e("hobby_type_crafts")]:client_1.HobbyType.CRAFTS,[e("hobby_type_dancing")]:client_1.HobbyType.DANCING,[e("hobby_type_reading")]:client_1.HobbyType.READING}});exports.getSubtypeLocalizations=getSubtypeLocalizations;const findKeyByValue=(e,t,i)=>{for(const[e,r]of Object.entries(i))if(r===t)return e};function getProfileModelName(e){switch(e){case client_1.ProfileType.RELATIONSHIP:return"relationshipProfile";case client_1.ProfileType.SPORT:return"sportProfile";case client_1.ProfileType.GAME:return"gameProfile";case client_1.ProfileType.HOBBY:return"hobbyProfile";case client_1.ProfileType.IT:return"itProfile";default:return"relationshipProfile"}}exports.findKeyByValue=findKeyByValue;