"use strict";var __awaiter=this&&this.__awaiter||function(e,i,r,s){return new(r||(r=Promise))((function(t,n){function o(e){try{d(s.next(e))}catch(e){n(e)}}function a(e){try{d(s.throw(e))}catch(e){n(e)}}function d(e){var i;e.done?t(e.value):(i=e.value,i instanceof r?i:new r((function(e){e(i)}))).then(o,a)}d((s=s.apply(e,i||[])).next())}))};Object.defineProperty(exports,"__esModule",{value:!0}),exports.sendLikesNotification=sendLikesNotification;const keyboards_1=require("../constants/keyboards"),postgres_1=require("../db/postgres"),i18n_1=require("../i18n"),getLikesInfo_1=require("./db/getLikesInfo"),sendForm_1=require("./sendForm"),utils_1=require("../queues/utils"),client_1=require("@prisma/client");function sendLikesNotification(e,i,r){return __awaiter(this,void 0,void 0,(function*(){var s,t,n,o;const a=String(null===(s=e.from)||void 0===s?void 0:s.id);e.logger.info({fromUserId:a,targetUserId:i,isAnswer:r},"Starting likes notification");const{count:d,gender:l}=yield(0,getLikesInfo_1.getLikesInfo)(i,"user");try{const s=yield postgres_1.prisma.session.findUnique({where:{key:i}});if(s){const d=JSON.parse(s.value);yield postgres_1.prisma.user.findUnique({where:{id:i},select:{gender:!0}});if(r)if(e.logger.info({fromUserId:a,targetUserId:i,step:d.step,hasCurrentCandidate:!!(null===(t=d.currentCandidateProfile)||void 0===t?void 0:t.id)},"Processing mutual like notification"),"search_people"!==d.step&&"search_people_with_likes"!==d.step||!(null===(n=d.currentCandidateProfile)||void 0===n?void 0:n.id)){const s=yield postgres_1.prisma.rouletteUser.findUnique({where:{id:i},select:{searchingPartner:!0,chatPartnerId:!0}});if((null==s?void 0:s.searchingPartner)||(null==s?void 0:s.chatPartnerId))return yield(0,utils_1.scheduleNotification)(i,a,client_1.NotificationType.MUTUAL_LIKE,{isAnswer:!0,delay:12e4}),void e.logger.info({fromUserId:a,targetUserId:i,isAnswer:r,notificationType:client_1.NotificationType.MUTUAL_LIKE},"Notification scheduled successfully");const t=yield postgres_1.prisma.profileLike.findFirst({where:{toProfileId:i,fromProfileId:a,liked:!0},orderBy:{createdAt:"desc"},select:{privateNote:!0}});yield(0,sendForm_1.sendForm)(e,null,{myForm:!0,sendTo:i,privateNote:null==t?void 0:t.privateNote}),yield e.api.sendMessage(i,`${(0,i18n_1.i18n)(!1).t(d.__language_code||"ru","mutual_sympathy")} [${e.session.activeProfile.name}](https://t.me/${(null===(o=e.from)||void 0===o?void 0:o.username)||""})`,{reply_markup:(0,keyboards_1.complainToUserKeyboard)(((...e)=>(0,i18n_1.i18n)(!1).t(d.__language_code||"ru",...e)),a),link_preview_options:{is_disabled:!0},parse_mode:"Markdown"}),yield postgres_1.prisma.session.update({where:{key:i},data:{value:JSON.stringify(Object.assign(Object.assign({},d),{step:"sleep_menu"}))}}),yield e.api.sendMessage(i,(0,i18n_1.i18n)(!1).t(d.__language_code||"ru","sleep_menu"),{reply_markup:(0,keyboards_1.profileKeyboard)()}),e.logger.info({fromUserId:a,targetUserId:i},"Sent mutual sympathy notification and updated session")}else yield e.api.sendMessage(i,(0,i18n_1.i18n)(!1).t(d.__language_code||"ru","somebody_liked_you_end_with_it")),yield postgres_1.prisma.session.update({where:{key:i},data:{value:JSON.stringify(Object.assign(Object.assign({},d),{pendingMutualLike:!0,pendingMutualLikeProfileId:a}))}}),e.logger.info({fromUserId:a,targetUserId:i,step:d.step},"Updated session with pending mutual like");else yield(0,utils_1.scheduleNotification)(i,a,client_1.NotificationType.LIKE,{isAnswer:!1}),e.logger.info({fromUserId:a,targetUserId:i,isAnswer:r,notificationType:client_1.NotificationType.LIKE},"Notification scheduled successfully")}else e.logger.error({fromUserId:a,targetUserId:i},"Error updating session somebodys_liked_you, session not found")}catch(r){e.logger.error({fromUserId:a,targetUserId:i,error:r instanceof Error?r.message:"Unknown error",stack:r instanceof Error?r.stack:void 0},"Error updating session somebodys_liked_you")}}))}