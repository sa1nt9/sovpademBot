"use strict";var __awaiter=this&&this.__awaiter||function(e,r,t,o){return new(t||(t=Promise))((function(a,n){function s(e){try{d(o.next(e))}catch(e){n(e)}}function i(e){try{d(o.throw(e))}catch(e){n(e)}}function d(e){var r;e.done?a(e.value):(r=e.value,r instanceof t?r:new t((function(e){e(r)}))).then(s,i)}d((o=o.apply(e,r||[])).next())}))};Object.defineProperty(exports,"__esModule",{value:!0}),exports.stopRouletteCommand=void 0;const postgres_1=require("../db/postgres"),keyboards_1=require("../constants/keyboards"),getReactionCounts_1=require("../functions/getReactionCounts"),i18n_1=require("../i18n"),stopRouletteCommand=e=>__awaiter(void 0,void 0,void 0,(function*(){var r;const t=String(null===(r=e.from)||void 0===r?void 0:r.id);e.logger.info({userId:t},"Starting stop roulette command");try{const r=yield postgres_1.prisma.user.findUnique({where:{id:t},include:{rouletteUser:!0}});if(!r||!r.rouletteUser)return e.logger.warn({userId:t},"User not found or no roulette record"),void(yield e.reply(e.t("roulette_not_in_chat"),{reply_markup:(0,keyboards_1.rouletteStartKeyboard)(e.t)}));if(r.rouletteUser.chatPartnerId){const o=r.rouletteUser.chatPartnerId;e.logger.info({userId:t,partnerUserId:o},"Stopping active chat"),yield postgres_1.prisma.rouletteUser.update({where:{id:o},data:{chatPartnerId:null,searchingPartner:!1,usernameRevealed:!1,profileRevealed:!1}}),yield postgres_1.prisma.rouletteChat.updateMany({where:{OR:[{user1Id:t,user2Id:o,endedAt:null},{user1Id:o,user2Id:t,endedAt:null}]},data:{endedAt:new Date,isProfileRevealed:r.rouletteUser.profileRevealed,isUsernameRevealed:r.rouletteUser.usernameRevealed}});const a=yield postgres_1.prisma.session.findUnique({where:{key:t}}),{__language_code:n}=a?JSON.parse(a.value):{};yield e.api.sendMessage(o,(0,i18n_1.i18n)(!1).t(n||"ru","roulette_partner_left"),{reply_markup:(0,keyboards_1.rouletteStartKeyboard)(e.t)});const s=yield(0,getReactionCounts_1.getReactionCounts)(t);yield e.api.sendMessage(o,(0,i18n_1.i18n)(!1).t(n||"ru","roulette_put_reaction_on_your_partner"),{reply_markup:(0,keyboards_1.rouletteReactionKeyboard)(e.t,t,s)}),yield postgres_1.prisma.rouletteUser.update({where:{id:t},data:{chatPartnerId:null,searchingPartner:!1,usernameRevealed:!1,profileRevealed:!1}}),yield e.reply(e.t("roulette_chat_ended"),{reply_markup:(0,keyboards_1.rouletteStartKeyboard)(e.t)});const i=yield(0,getReactionCounts_1.getReactionCounts)(o);yield e.reply(e.t("roulette_put_reaction_on_your_partner"),{reply_markup:(0,keyboards_1.rouletteReactionKeyboard)(e.t,o,i)}),e.logger.info({userId:t,partnerUserId:o},"Chat ended successfully")}else r.rouletteUser.searchingPartner?(e.logger.info({userId:t},"Stopping partner search"),yield postgres_1.prisma.rouletteUser.update({where:{id:t},data:{searchingPartner:!1}}),yield e.reply(e.t("roulette_stop_searching_success"),{reply_markup:(0,keyboards_1.rouletteStartKeyboard)(e.t)}),e.session.step="roulette_start",e.logger.info({userId:t},"Partner search stopped successfully")):(e.logger.warn({userId:t},"User not in chat or search"),yield e.reply(e.t("roulette_not_in_chat"),{reply_markup:(0,keyboards_1.rouletteStartKeyboard)(e.t)}))}catch(r){e.logger.error({userId:t,error:r instanceof Error?r.message:"Unknown error",stack:r instanceof Error?r.stack:void 0},"Error executing stop roulette command"),yield e.reply(e.t("error_occurred"))}}));exports.stopRouletteCommand=stopRouletteCommand;