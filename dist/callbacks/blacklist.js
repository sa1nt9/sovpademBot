"use strict";var __awaiter=this&&this.__awaiter||function(e,r,t,l){return new(t||(t=Promise))((function(i,o){function a(e){try{s(l.next(e))}catch(e){o(e)}}function n(e){try{s(l.throw(e))}catch(e){o(e)}}function s(e){var r;e.done?i(e.value):(r=e.value,r instanceof t?r:new t((function(e){e(r)}))).then(a,n)}s((l=l.apply(e,r||[])).next())}))};Object.defineProperty(exports,"__esModule",{value:!0}),exports.handleBlacklistRemove=void 0;const postgres_1=require("../db/postgres"),sleepMenu_1=require("../keyboards/sleepMenu"),handleBlacklistRemove=e=>__awaiter(void 0,void 0,void 0,(function*(){var r,t,l;try{const i=String(null===(r=e.from)||void 0===r?void 0:r.id),o=null===(l=null===(t=e.callbackQuery)||void 0===t?void 0:t.data)||void 0===l?void 0:l.split("_")[2];if(!o)return void(yield e.answerCallbackQuery(e.t("error_occurred")));yield postgres_1.prisma.blacklist.deleteMany({where:{userId:i,targetId:o}}),yield e.answerCallbackQuery(e.t("blacklist_remove_success")),yield e.reply(e.t("sleep_menu"),{reply_markup:sleepMenu_1.sleepMenu})}catch(r){e.logger.error(r,"Error removing user from blacklist"),yield e.answerCallbackQuery(e.t("blacklist_remove_error"))}}));exports.handleBlacklistRemove=handleBlacklistRemove;